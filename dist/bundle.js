(()=>{"use strict";class t{constructor(t){this.board=t||[],this.missed=[[]],this.hits=[],this.allow=!1,this.name=""}initialize(t){for(let e=0;e<10;e++){this.board[e]=[];for(let r=0;r<10;r++)this.board[e][r]=t,t++}}placeShip(t){let e=t.column,r=t.position;for(let t=0;t<r.length;t++)for(let l=0;l<r.length;l++)this.board[e[t]][this.board[e[t]].indexOf(r[l])]="x"}recieveAttack(t){this.hits.push(t)}allowAttack(){return this.allow}instanceName(){return this}allShipSunk(){return 16===this.hits.length}}class e{constructor(){this.turn=!0,this.position=this.position}autoPlay(t){return t[Math.floor(100*Math.random())]}}class r{constructor(t,e,r){this.length=t,this.hits=[],this.position=r||[],this.column=e||[]}hit(t){this.hits.push(t)}allShipSunk(){return 1===this.hits.length}}const l=(t,e,r,l)=>{const n=document.querySelector(e);t.board.forEach((t=>{t.forEach((t=>{const e=document.createElement("div");e.classList.add(r),e.classList.add(l),e.setAttribute("value",t),n.appendChild(e),e.value=t,e.textContent=t}))}))},n=(t,e,r,l)=>{o(e,r);const n=document.querySelector(`#${e}`);t.board.forEach((t=>{t.forEach((t=>{const e=document.createElement("div");e.classList.add(r),e.classList.add(l),e.setAttribute("value",t),n.appendChild(e),e.value=t,e.textContent=t}))}))},o=(t,e)=>{const r=document.querySelector(`#${t}`);document.querySelectorAll(`.${e}`).forEach((t=>{r.removeChild(t)}))},a=(t,e,r)=>{let l=[6,7,8,9],n=[7,8,9],o=[8,9],a=[9];if(1===r)switch(!0){case 5===t.length&&l.includes(e.target.value%10):case 4===t.length&&n.includes(e.target.value%10):case 3===t.length&&o.includes(e.target.value%10):case 2===t.length&&a.includes(e.target.value%10):return!0}if(10===r)switch(!0){case 5===t.length&&l.includes(Math.floor(e.target.value/10)):case 4===t.length&&n.includes(Math.floor(e.target.value/10)):case 3===t.length&&o.includes(Math.floor(e.target.value/10)):case 2===t.length&&a.includes(Math.floor(e.target.value/10)):return!0}},i=(t,e,r,l)=>{let n=[];if(1!==t.length){for(let o=0;o<=(t.length-1)*l;o+=l){if(a(t,e,l))return;if(e.target.value+o=="x0")return;if(null===document.querySelector(`div[value="${e.target.value+o}"]`))return;if(e.target.value+o=="x0")return;document.querySelector(`div[value="${e.target.value+o}"]`).style.backgroundColor=r,n.push(e.target.value+o)}return n}};let c=!0,s="horizontal",u=1;const h=document.querySelector("#rotate"),d=(t,e,l)=>{let o=document.querySelectorAll(`.player-grids.${s}`);const a=new r(e,[0,0,0],[1,2,3]);3===e&&c&&(e+=1,c=!1),e<=1?g(t):(o.forEach((r=>r.addEventListener("mouseover",(l=>{i(a,l,"lightblue",u),r.addEventListener("click",(r=>{try{a.position=i(a,r,"red",u),a.column=(t=>{let e=[];for(let r=0;r<=t.length-1;r++)t.position[r]&&e.push(Math.floor(t.position[r]/10));return e})(a),t.placeShip(a),n(t,"primary-container","player-grids",s),Array.from(document.querySelectorAll(".player-grids")).filter((t=>"x"===t.value)).forEach((t=>t.style.backgroundColor="lightblue"))}catch{return}d(t,e-1)}))})))),o.forEach((t=>t.addEventListener("mouseout",(t=>{i(a,t,"rgb(232 230 230)",u)})))))},g=r=>{let l,n,o,a=new t;a.name="aiBoard";const i=document.querySelectorAll(".player-grids");document.querySelectorAll(".ai-grids").forEach((t=>t.addEventListener("click",(c=>{const s=c.target.value;l=new e,n=l.autoPlay(i),o=n.value,"x"===s?(a.recieveAttack(s),v(a),t.style.backgroundColor="rgb(248, 78, 49 )",p(n,o,r)):(t.style.backgroundColor="lightgreen",p(n,o,r))}))))},p=(t,e,r)=>{t.addEventListener("click",(l=>{const n=l.target.value;"x"===e?(r.recieveAttack(e),v(r),t.style.backgroundColor="rgb(248, 78, 49 )",r.recieveAttack(n)):t.style.backgroundColor="lightgreen"}));const l=new Event("click");t.dispatchEvent(l)};h.addEventListener("click",(t=>{"horizontal"===s?(s="vertical",u=10):"vertical"===s&&(s="horizontal",u=1)}));const v=t=>{let e="";if(1===t.hits.length){e="aiBoard"===t.name?"You":"Computer";const r=document.querySelector(".winner-container");r.classList.add("show"),r.firstElementChild.textContent=`${e} Won!!`,r.addEventListener("click",(t=>{t.target instanceof HTMLButtonElement&&location.reload()}))}},f=(t,e)=>{t.column.fill(e);let r=Math.floor(5*Math.random()).toString(),l=parseInt("1"+e+r);t.position=t.position.map((t=>{const e=l+1;return l+=1,e}))};(()=>{new e,new e;const o=new t,a=new t;o.initialize(0),a.initialize(100),l(o,"#primary-container","player-grids","horizontal"),l(a,"#secondary-container","ai-grids","horizontal"),(t=>{const e=new r(5,[0,0,0,0,0],[101,102,103,104,105]),l=new r(4,[7,7,7,7],[173,174,175,176]),o=new r(3,[2,2,2],[122,123,124]),a=new r(3,[4,4,4],[144,145,146]),i=new r(2,[8,9],[181,191]);let c=(t=>{let e=[],r=Math.floor(10*Math.random());for(let t=0;t<5;t++){for(;e.includes(r);)r=Math.floor(10*Math.random());e.push(r)}return e})();f(e,c[0]),f(l,c[1]),f(o,c[2]),f(a,c[3]),f(i,c[4]),t.placeShip(e),t.placeShip(l),t.placeShip(o),t.placeShip(a),t.placeShip(i),n(t,"secondary-container","ai-grids","horizontal")})(a),d(o,5,a)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,