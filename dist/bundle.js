(()=>{"use strict";class e{constructor(){this.turn=!0,this.position=this.position}autoPlay(e){return e[Math.floor(100*Math.random())]}}class t{constructor(e,t,r){this.length=e,this.hits=[],this.position=r||[],this.column=t||[]}hit(e){this.hits.push(e)}isSunk(){return this.length===this.hits.length}}const r=(e,t,r,l)=>{const o=document.querySelector(t);e.board.forEach((e=>{e.forEach((e=>{const t=document.createElement("div");t.classList.add(r),t.classList.add(l),t.setAttribute("value",e),o.appendChild(t),t.value=e,t.textContent=e}))}))},l=(e,t,r,l)=>{o(t,r);const a=document.querySelector(`#${t}`);e.board.forEach((e=>{e.forEach((e=>{const t=document.createElement("div");t.classList.add(r),t.classList.add(l),t.setAttribute("value",e),a.appendChild(t),t.value=e,t.textContent=e}))}))},o=(e,t)=>{const r=document.querySelector(`#${e}`);document.querySelectorAll(`.${t}`).forEach((e=>{r.removeChild(e)}))},a=(e,t,r)=>{let l=[6,7,8,9],o=[7,8,9],a=[8,9],n=[9];if(1===r)switch(!0){case 5===e.length&&l.includes(t.target.value%10):case 4===e.length&&o.includes(t.target.value%10):case 3===e.length&&a.includes(t.target.value%10):case 2===e.length&&n.includes(t.target.value%10):return!0}if(10===r)switch(!0){case 5===e.length&&l.includes(Math.floor(t.target.value/10)):case 4===e.length&&o.includes(Math.floor(t.target.value/10)):case 3===e.length&&a.includes(Math.floor(t.target.value/10)):case 2===e.length&&n.includes(Math.floor(t.target.value/10)):return!0}},n=(e,t,r,l)=>{let o=[];if(1!==e.length){for(let n=0;n<=(e.length-1)*l;n+=l){if(a(e,t,l))return;if(5===e.length&&t.target.value%10==6)return;if(t.target.value+n=="x0")return;if(null===document.querySelector(`div[value="${t.target.value+n}"]`))return;if(t.target.value+n=="x0")return;document.querySelector(`div[value="${t.target.value+n}"]`).style.backgroundColor=r,o.push(t.target.value+n)}return o}};let i=!0,c="horizontal",s=1;const u=document.querySelector("#rotate"),d=(e,r,o)=>{let a=document.querySelectorAll(`.player-grids.${c}`);const u=new t(r,[0,0,0],[1,2,3]);if(3===r&&i&&(r+=1,i=!1),r<=1)return console.log("am i ever here????"),console.log(e),console.log(o),h(o,e),void(e.allow=!0);a.forEach((t=>t.addEventListener("mouseover",(o=>{n(u,o,"blue",s),t.addEventListener("click",(t=>{u.position=n(u,t,"gray",s),u.column=(e=>{let t=[];for(let r=0;r<=e.length-1;r++)e.position[r]&&t.push(Math.floor(e.position[r]/10));return t})(u),e.placeShip(u),l(e,"primary-container","player-grids",c),Array.from(document.querySelectorAll(".player-grids")).filter((e=>"x"===e.value)).forEach((e=>e.style.backgroundColor="transparent")),d(e,r-1)}))})))),a.forEach((e=>e.addEventListener("mouseout",(e=>{n(u,e,"gray",s)}))))},h=(t,r)=>{let l,o,a;const n=document.querySelectorAll(".player-grids");document.querySelectorAll(".ai-grids").forEach((i=>i.addEventListener("click",(c=>{const s=c.target.value;l=new e,o=l.autoPlay(n),a=o.value,"x"===s?(t.recieveAttack(s),i.style.backgroundColor="red",g(o,a,r)):(i.style.backgroundColor="green",g(o,a,r))}))))},g=(e,t,r)=>{e.addEventListener("click",(l=>{const o=l.target.value;"x"===t?(r.recieveAttack(t),e.style.backgroundColor="red",r.recieveAttack(o),console.log("ai red")):(e.style.backgroundColor="green",console.log(e))}));const l=new Event("click");e.dispatchEvent(l)};u.addEventListener("click",(e=>{"horizontal"===c?(c="vertical",s=10):"vertical"===c&&(c="horizontal",s=1)}));class v{constructor(e){this.board=e||[],this.missed=[[]],this.hits=[],this.allow=!1}initialize(e){for(let t=0;t<10;t++){this.board[t]=[];for(let r=0;r<10;r++)this.board[t][r]=e,e++}}placeShip(e){let t=e.column,r=e.position;for(let e=0;e<r.length;e++)for(let l=0;l<r.length;l++)this.board[t[e]][this.board[t[e]].indexOf(r[l])]="x"}recieveAttack(e){this.hits.push(e)}allowAttack(){return this.allow}}(()=>{new e,new e;const o=new v,a=new v;o.initialize(0),a.initialize(100),r(o,"#primary-container","player-grids","horizontal"),r(a,"#secondary-container","ai-grids","x"),(e=>{const r=new t(5,[0,0,0,0,0],[101,102,103,104,105]),o=new t(4,[7,7,7,7],[173,174,175,176]),a=new t(3,[2,2,2],[122,123,124]),n=new t(3,[4,4,4],[144,145,146]),i=new t(2,[8,9],[181,191]);e.placeShip(r),e.placeShip(o),e.placeShip(a),e.placeShip(n),e.placeShip(i),l(e,"secondary-container","ai-grids")})(a),d(o,5,a)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,