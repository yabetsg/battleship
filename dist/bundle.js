(()=>{"use strict";class t{constructor(t,e,i){this.length=t,this.hits=[],this.position=i||[],this.column=e||[]}hit(t){this.position.includes(t)&&!this.hits.includes(t)&&this.hits.push(t)}isSunk(){return this.length===this.hits.length}}const e=(t,e,i,o)=>{const r=document.querySelector(e);t.initialize(),t.board.forEach((t=>{t.forEach((t=>{const e=document.createElement("div");e.classList.add(i),e.classList.add(o),e.setAttribute("value",t),r.appendChild(e),e.value=t,e.textContent=t}))}))},i=(t,e,i,r)=>{o(e,i);const s=document.querySelector(`#${e}`);t.board.forEach((t=>{t.forEach((t=>{const e=document.createElement("div");e.classList.add(i),e.classList.add(r),e.setAttribute("value",t),s.appendChild(e),e.value=t,e.textContent=t}))}))},o=(t,e)=>{const i=document.querySelector(`#${t}`);document.querySelectorAll(`.${e}`).forEach((t=>{i.removeChild(t)}))},r=(t,e,i,o)=>{let r=[];if(1!==t.length){for(let s=0;s<=(t.length-1)*o;s+=o){if(e.target.value+s=="x0")return;if(null===document.querySelector(`div[value="${e.target.value+s}"]`))return;if(e.target.value+s=="x0")return void console.log("event:"+e.target.value+s);document.querySelector(`div[value="${e.target.value+s}"]`).style.backgroundColor=i,r.push(e.target.value+s)}return r}};let s=!0,n="horizontal",l=1;const a=document.querySelector("#rotate"),c=(e,o)=>{let a=document.querySelectorAll(`#primary-container>.${n}`);const h=new t(o,[0,0,0],[1,2,3]);3===o&&s&&(o+=1,s=!1),o<=0||(a.forEach((t=>t.addEventListener("mouseover",(s=>{r(h,s,"blue",l),t.addEventListener("click",(t=>{h.position=r(h,t,"gray",l),h.column=(t=>{let e=[];for(let i=0;i<=t.length-1;i++)console.log(t.position[i]),null!=t.position[i]&&e.push(Math.floor(t.position[i]/10));return e})(h),e.placeShip(h),i(e,"primary-container","player-grids",n),Array.from(document.querySelectorAll(".player-grids")).filter((t=>"x"===t.value)).forEach((t=>t.style.backgroundColor="transparent")),c(e,o-1)}))})))),a.forEach((t=>t.addEventListener("mouseout",(t=>{r(h,t,"gray",l)})))))};a.addEventListener("click",(t=>{"horizontal"===n?(n="vertical",l=10,console.log("inside h")):"vertical"===n&&(n="horizontal",l=1)}));class h{constructor(t){this.board=t||[],this.missed=[[]],this.hits=[[]]}initialize(){let t=0;for(let e=0;e<10;e++){this.board[e]=[];for(let i=0;i<10;i++)this.board[e][i]=t,t++}}placeShip(t){let e=t.column,i=t.position;for(let t=0;t<i.length;t++)for(let o=0;o<i.length;o++)this.board[e[t]][this.board[e[t]].indexOf(i[o])]="x"}recieveAttack(t,e){"x"===this.board[t][e]?void 0===this.hits[t]?this.hits[t]=[e]:this.hits[t].push(e):void 0===this.missed[t]?this.missed[t]=[e]:this.missed[t].push(e)}}class u{constructor(){this.turn=!0,this.position=this.position}autoPlay(){return Math.floor(10*Math.random())}}(()=>{new u,new u;const o=new h,r=new h;e(o,"#primary-container","player-grids","horizontal"),e(r,"#secondary-container","ai-grids","horizontal"),c(o,5),(e=>{const o=new t(5,[0,0,0,0,0],[1,2,3,4,5]),r=new t(4,[7,7,7,7],[73,74,75,76]),s=new t(3,[2,2,2],[22,23,24]),n=new t(3,[4,4,4],[44,45,46]),l=new t(2,[8,9],[81,91]);e.placeShip(o),e.placeShip(r),e.placeShip(s),e.placeShip(n),e.placeShip(l),i(e,"secondary-container","ai-grids")})(r)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,