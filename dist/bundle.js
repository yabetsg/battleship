(()=>{"use strict";class e{constructor(e){this.board=e||[],this.missed=[[]],this.hits=[],this.allow=!1}initialize(e){for(let t=0;t<10;t++){this.board[t]=[];for(let r=0;r<10;r++)this.board[t][r]=e,e++}}placeShip(e){let t=e.column,r=e.position;for(let e=0;e<r.length;e++)for(let o=0;o<r.length;o++)this.board[t[e]][this.board[t[e]].indexOf(r[o])]="x"}recieveAttack(e){this.hits.push(e)}allowAttack(){return this.allow}}class t{constructor(){this.turn=!0,this.position=this.position}autoPlay(e){return e[Math.floor(100*Math.random())]}}class r{constructor(e,t,r){this.length=e,this.hits=[],this.position=r||[],this.column=t||[]}hit(e){this.hits.push(e)}isSunk(){return this.length===this.hits.length}}const o=(e,t,r,o)=>{const l=document.querySelector(t);e.board.forEach((e=>{e.forEach((e=>{const t=document.createElement("div");t.classList.add(r),t.classList.add(o),t.setAttribute("value",e),l.appendChild(t),t.value=e,t.textContent=e}))}))},l=(e,t,r,o)=>{n(t,r);const l=document.querySelector(`#${t}`);e.board.forEach((e=>{e.forEach((e=>{const t=document.createElement("div");t.classList.add(r),t.classList.add(o),t.setAttribute("value",e),l.appendChild(t),t.value=e,t.textContent=e}))}))},n=(e,t)=>{const r=document.querySelector(`#${e}`);document.querySelectorAll(`.${t}`).forEach((e=>{r.removeChild(e)}))},a=(e,t,r)=>{let o=[6,7,8,9],l=[7,8,9],n=[8,9],a=[9];if(1===r)switch(!0){case 5===e.length&&o.includes(t.target.value%10):case 4===e.length&&l.includes(t.target.value%10):case 3===e.length&&n.includes(t.target.value%10):case 2===e.length&&a.includes(t.target.value%10):return!0}if(10===r)switch(!0){case 5===e.length&&o.includes(Math.floor(t.target.value/10)):case 4===e.length&&l.includes(Math.floor(t.target.value/10)):case 3===e.length&&n.includes(Math.floor(t.target.value/10)):case 2===e.length&&a.includes(Math.floor(t.target.value/10)):return!0}},i=(e,t,r,o)=>{let l=[];if(1!==e.length){for(let n=0;n<=(e.length-1)*o;n+=o){if(a(e,t,o))return;if(5===e.length&&t.target.value%10==6)return;if(t.target.value+n=="x0")return;if(null===document.querySelector(`div[value="${t.target.value+n}"]`))return;if(t.target.value+n=="x0")return;document.querySelector(`div[value="${t.target.value+n}"]`).style.backgroundColor=r,l.push(t.target.value+n)}return l}};let c=!0,s="horizontal",u=1;const h=document.querySelector("#rotate"),d=(e,t,o)=>{let n=document.querySelectorAll(`.player-grids.${s}`);const a=new r(t,[0,0,0],[1,2,3]);if(3===t&&c&&(t+=1,c=!1),t<=1)return console.log("am i ever here????"),void g(e);n.forEach((r=>r.addEventListener("mouseover",(n=>{i(a,n,"blue",u),r.addEventListener("click",(r=>{console.log(o),a.position=i(a,r,"gray",u),a.column=(e=>{let t=[];for(let r=0;r<=e.length-1;r++)e.position[r]&&t.push(Math.floor(e.position[r]/10));return t})(a),e.placeShip(a),l(e,"primary-container","player-grids",s),Array.from(document.querySelectorAll(".player-grids")).filter((e=>"x"===e.value)).forEach((e=>e.style.backgroundColor="transparent")),d(e,t-1)}))})))),n.forEach((e=>e.addEventListener("mouseout",(e=>{i(a,e,"gray",u)}))))},g=r=>{let o,l,n,a=new e;const i=document.querySelectorAll(".player-grids");document.querySelectorAll(".ai-grids").forEach((e=>e.addEventListener("click",(c=>{const s=c.target.value;o=new t,l=o.autoPlay(i),n=l.value,"x"===s?(a.recieveAttack(s),p(a),e.style.backgroundColor="red",v(l,n,r),console.log("hits:"+a.hits.length)):(e.style.backgroundColor="green",v(l,n,r))}))))},v=(e,t,r)=>{e.addEventListener("click",(o=>{const l=o.target.value;"x"===t?(r.recieveAttack(t),p(r),e.style.backgroundColor="red",r.recieveAttack(l),console.log("ai red")):e.style.backgroundColor="green"}));const o=new Event("click");e.dispatchEvent(o)};h.addEventListener("click",(e=>{"horizontal"===s?(s="vertical",u=10):"vertical"===s&&(s="horizontal",u=1)}));const p=e=>{17===e.hits.length&&console.log("player won!")};(()=>{new t,new t;const n=new e,a=new e;n.initialize(0),a.initialize(100),o(n,"#primary-container","player-grids","horizontal"),o(a,"#secondary-container","ai-grids","horizontal"),(e=>{const t=new r(5,[0,0,0,0,0],[101,102,103,104,105]),o=new r(4,[7,7,7,7],[173,174,175,176]),n=new r(3,[2,2,2],[122,123,124]),a=new r(3,[4,4,4],[144,145,146]),i=new r(2,[8,9],[181,191]);e.placeShip(t),l(e,"secondary-container","ai-grids","horizontal"),e.placeShip(o),l(e,"secondary-container","ai-grids","horizontal"),e.placeShip(n),l(e,"secondary-container","ai-grids","horizontal"),e.placeShip(a),l(e,"secondary-container","ai-grids","horizontal"),e.placeShip(i),l(e,"secondary-container","ai-grids","horizontal")})(a),d(n,5,a)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,