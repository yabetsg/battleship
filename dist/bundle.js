(()=>{"use strict";class t{constructor(t,e,i){this.length=t,this.hits=[],this.position=i||[],this.column=e||[]}hit(t){this.position.includes(t)&&!this.hits.includes(t)&&this.hits.push(t)}isSunk(){return this.length===this.hits.length}}const e=(t,e,i,r)=>{const o=document.querySelector(e);t.board.forEach((t=>{t.forEach((t=>{const e=document.createElement("div");e.classList.add(i),e.classList.add(r),e.setAttribute("value",t),o.appendChild(e),e.value=t,e.textContent=t}))}))},i=(t,e,i,o)=>{r(e,i);const s=document.querySelector(`#${e}`);t.board.forEach((t=>{t.forEach((t=>{const e=document.createElement("div");e.classList.add(i),e.classList.add(o),e.setAttribute("value",t),s.appendChild(e),e.value=t,e.textContent=t}))}))},r=(t,e)=>{const i=document.querySelector(`#${t}`);document.querySelectorAll(`.${e}`).forEach((t=>{i.removeChild(t)}))},o=(t,e,i,r)=>{let o=[];if(1!==t.length){for(let s=0;s<=(t.length-1)*r;s+=r){if(e.target.value+s=="x0")return;if(null===document.querySelector(`div[value="${e.target.value+s}"]`))return;if(e.target.value+s=="x0")return;document.querySelector(`div[value="${e.target.value+s}"]`).style.backgroundColor=i,o.push(e.target.value+s)}return o}};let s=!0,n="horizontal",a=1;const l=document.querySelector("#rotate"),c=(e,r)=>{let l=document.querySelectorAll(`.player-grids.${n}`);const h=new t(r,[0,0,0],[1,2,3]);3===r&&s&&(r+=1,s=!1),r<=0||(l.forEach((t=>t.addEventListener("mouseover",(s=>{o(h,s,"blue",a),t.addEventListener("click",(t=>{h.position=o(h,t,"gray",a),h.column=(t=>{let e=[];for(let i=0;i<=t.length-1;i++)t.position[i]&&e.push(Math.floor(t.position[i]/10));return e})(h),e.placeShip(h),i(e,"primary-container","player-grids",n),Array.from(document.querySelectorAll(".player-grids")).filter((t=>"x"===t.value)).forEach((t=>t.style.backgroundColor="transparent")),c(e,r-1)}))})))),l.forEach((t=>t.addEventListener("mouseout",(t=>{o(h,t,"gray",a)})))))};l.addEventListener("click",(t=>{"horizontal"===n?(n="vertical",a=10):"vertical"===n&&(n="horizontal",a=1)}));class h{constructor(t){this.board=t||[],this.missed=[[]],this.hits=[[]]}initialize(t){for(let e=0;e<10;e++){this.board[e]=[];for(let i=0;i<10;i++)this.board[e][i]=t,t++}}placeShip(t){let e=t.column,i=t.position;for(let t=0;t<i.length;t++)for(let r=0;r<i.length;r++)this.board[e[t]][this.board[e[t]].indexOf(i[r])]="x"}recieveAttack(t,e){"x"===this.board[t][e]?void 0===this.hits[t]?this.hits[t]=[e]:this.hits[t].push(e):void 0===this.missed[t]?this.missed[t]=[e]:this.missed[t].push(e)}}class u{constructor(){this.turn=!0,this.position=this.position}autoPlay(){return Math.floor(10*Math.random())}}(()=>{new u,new u;const r=new h,o=new h;r.initialize(0),o.initialize(100),e(r,"#primary-container","player-grids","horizontal"),e(o,"#secondary-container","ai-grids","x"),c(r,5),(e=>{const r=new t(5,[0,0,0,0,0],[100,102,103,104,105]),o=new t(4,[7,7,7,7],[173,174,175,176]),s=new t(3,[2,2,2],[122,123,124]),n=new t(3,[4,4,4],[144,145,146]),a=new t(2,[8,9],[181,191]);e.placeShip(r),e.placeShip(o),e.placeShip(s),e.placeShip(n),e.placeShip(a),i(e,"secondary-container","ai-grids")})(o)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,