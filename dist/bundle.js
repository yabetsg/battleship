(()=>{"use strict";class t{constructor(t){this.board=t||[],this.missed=[[]],this.hits=[[]]}initialize(){let t=0;for(let e=0;e<10;e++){this.board[e]=[];for(let i=0;i<10;i++)this.board[e][i]=t,t++}}placeShip(t){let e=t.column,i=t.position;for(let t=0;t<i.length;t++)this.board[e][this.board[e].indexOf(i[t])]="x"}recieveAttack(t,e){"x"===this.board[t][e]?void 0===this.hits[t]?this.hits[t]=[e]:this.hits[t].push(e):void 0===this.missed[t]?this.missed[t]=[e]:this.missed[t].push(e)}}class e{constructor(){this.turn=!0,this.position=this.position}autoPlay(){return Math.floor(10*Math.random())}}class i{constructor(t,e,i){this.length=t,this.hits=[],this.position=i||[],this.column=e}hit(t){this.position.includes(t)&&!this.hits.includes(t)&&this.hits.push(t)}isSunk(){return this.length===this.hits.length}}const s=(t,e,i,s)=>{const o=document.querySelector(e);t.initialize(),t.board.forEach((t=>{t.forEach((t=>{const e=document.createElement("div");e.classList.add(i),e.classList.add(s),e.setAttribute("value",t),o.appendChild(e),e.value=t,e.textContent=t}))}))},o=(t,e,i)=>{r(e,i);const s=document.querySelector(`#${e}`);t.board.forEach((t=>{t.forEach((t=>{const e=document.createElement("div");e.classList.add(i),e.setAttribute("value",t),s.appendChild(e),e.value=t,e.textContent=t}))}))},r=(t,e)=>{const i=document.querySelector(`#${t}`);document.querySelectorAll(`.${e}`).forEach((t=>{i.removeChild(t)}))},n=(t,e,i)=>{let s=[];if(1!==t.length){for(let o=0;o<=t.length-1;o++)document.querySelector(`div[value="${e.target.value+o}"]`).style.backgroundColor=i,s.push(e.target.value+o);return s}};let a=!0;const l=(t,e)=>{const s=document.querySelectorAll("#primary-container>.player-grids"),r=(document.querySelectorAll("#primary-container>.player-grids"),document.querySelector("#rotate")),c=new i(e,0,[1,2,3]);3===e&&a&&(e+=1,a=!1),e<=0||(s.forEach((i=>i.addEventListener("mouseover",(s=>{n(c,s,"blue"),i.addEventListener("click",(i=>{c.position=n(c,i,"yellow"),c.column=Math.floor(c.position[0]/10),t.placeShip(c),o(t,"primary-container","player-grids"),l(t,e-1)}))})))),s.forEach((t=>t.addEventListener("mouseout",(t=>{n(c,t,"black")})))),r.addEventListener("click",(t=>{s.forEach((t=>{t.classList.toggle("horizontal"),t.classList.toggle("vertical")}))})))};(()=>{new e,new e;const r=new t,n=new t;s(r,"#primary-container","player-grids","horizontal"),s(n,"#secondary-container","ai-grids","horizontal"),l(r,5),(t=>{const e=new i(5,0,[1,2,3,4,5]),s=new i(4,7,[73,74,75,76]),r=new i(3,2,[22,23,24]),n=new i(3,4,[44,45,46]),a=new i(2,9,[91,92]);t.placeShip(e),t.placeShip(s),t.placeShip(r),t.placeShip(n),t.placeShip(a),o(t,"secondary-container","ai-grids")})(n)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUVWQSxFQUFRWCxVQUFVMEIsT0FBTyxjQUN6QmYsRUFBUVgsVUFBVTBCLE9BQU8sV0FBVyxHQUN2QyxJQUNILEVDdEhpQixNQUNKLElBQUlqRCxFQUNSLElBQUlBLEVBRGYsTUFFTWtELEVBQWMsSUFBSXJFLEVBQ2xCc0UsRUFBVSxJQUFJdEUsRUFFcEI4QixFQUFZdUMsRUFBWSxxQkFBcUIsZUFBZSxjQUM1RHZDLEVBQVl3QyxFQUFRLHVCQUF1QixXQUFXLGNBQ3JEUCxFQUFrQk0sRUFBWSxHRHVITCxDQUFDTCxJQUMzQixNQUFNckQsRUFBTyxJQUFJYyxFQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFDN0I4QyxFQUFRLElBQUk5QyxFQUFLLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEtBQy9CK0MsRUFBUSxJQUFJL0MsRUFBSyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsS0FDNUJnRCxFQUFRLElBQUloRCxFQUFLLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxLQUM1QmlELEVBQVEsSUFBSWpELEVBQUssRUFBRSxFQUFFLENBQUMsR0FBRyxLQUMvQnVDLEVBQVV0RCxVQUFVQyxHQUNwQnFELEVBQVV0RCxVQUFVNkQsR0FDcEJQLEVBQVV0RCxVQUFVOEQsR0FDcEJSLEVBQVV0RCxVQUFVK0QsR0FDcEJULEVBQVV0RCxVQUFVZ0UsR0FDcEIxQixFQUFZZ0IsRUFBVSxzQkFBc0IsV0FBVyxFQ2pJdkRXLENBQWNMLEVBQU8sRUFlekJNLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2ZhY3Rvcmllcy9HYW1lQm9hcmQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9mYWN0b3JpZXMvUGxheWVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvZmFjdG9yaWVzL1NoaXAuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zY3JpcHRzL2RvbS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3NjcmlwdHMvbWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lQm9hcmQge1xuICBjb25zdHJ1Y3Rvcihib2FyZCkge1xuICAgIHRoaXMuYm9hcmQgPSBib2FyZCB8fCBbXTtcbiAgICB0aGlzLm1pc3NlZCA9IFtbXV07XG4gICAgdGhpcy5oaXRzID0gW1tdXTtcbiAgfVxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgbGV0IGNvdW50ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgIHRoaXMuYm9hcmRbaV0gPSBbXTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMTA7IGorKykge1xuICAgICAgICB0aGlzLmJvYXJkW2ldW2pdID0gY291bnQ7XG4gICAgICAgIGNvdW50Kys7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcGxhY2VTaGlwKHNoaXApIHtcbiAgICBsZXQgY29sdW1uID0gc2hpcC5jb2x1bW47XG4gICAgbGV0IHBvc2l0aW9uID0gc2hpcC5wb3NpdGlvbjtcbiAgICBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc2l0aW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmJvYXJkW2NvbHVtbl1bdGhpcy5ib2FyZFtjb2x1bW5dLmluZGV4T2YocG9zaXRpb25baV0pXSA9ICd4J1xuICAgICAgXG4gICAgfVxuICAgIFxuICB9XG5cbiAgcmVjaWV2ZUF0dGFjayhjb2x1bW4sIHBvc2l0aW9uKSB7XG4gICAgaWYgKHRoaXMuYm9hcmRbY29sdW1uXVtwb3NpdGlvbl0gPT09IFwieFwiKSB7XG4gICAgICBpZiAodGhpcy5oaXRzW2NvbHVtbl0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmhpdHNbY29sdW1uXSA9IFtwb3NpdGlvbl07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmhpdHNbY29sdW1uXS5wdXNoKHBvc2l0aW9uKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMubWlzc2VkW2NvbHVtbl0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5taXNzZWRbY29sdW1uXSA9IFtwb3NpdGlvbl07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubWlzc2VkW2NvbHVtbl0ucHVzaChwb3NpdGlvbik7XG4gICAgfVxuICB9XG4gXG59XG4iLCJleHBvcnQgY2xhc3MgUGxheWVye1xuICAgIGNvbnN0cnVjdG9yKCl7IFxuICAgICAgICB0aGlzLnR1cm4gPSB0cnVlO1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbjtcbiAgICB9XG4gIFxuICAgIGF1dG9QbGF5KCl7XG4gICAgICAgIGxldCByYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqMTApO1xuICAgICAgICByZXR1cm4gcmFuZG9tO1xuICAgIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTaGlwe1xuICAgIGNvbnN0cnVjdG9yKGxlbmd0aCxjb2x1bW4scG9zaXRpb24pe1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgdGhpcy5oaXRzID0gW107XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbnx8W107XG4gICAgICAgIHRoaXMuY29sdW1uID0gY29sdW1uO1xuICAgICAgIFxuICAgIH1cbiAgICBoaXQoaGl0UG9zaXRpb24pe1xuICAgICAgICBpZih0aGlzLnBvc2l0aW9uLmluY2x1ZGVzKGhpdFBvc2l0aW9uKSYmICEodGhpcy5oaXRzLmluY2x1ZGVzKGhpdFBvc2l0aW9uKSkpe1xuICAgICAgICAgICAgdGhpcy5oaXRzLnB1c2goaGl0UG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cblxuICAgIGlzU3Vuaygpe1xuICAgICAgICBpZih0aGlzLmxlbmd0aCA9PT0gdGhpcy5oaXRzLmxlbmd0aCl7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG4iLCJpbXBvcnQgR2FtZUJvYXJkIGZyb20gXCIuLi9mYWN0b3JpZXMvR2FtZUJvYXJkXCI7XG5pbXBvcnQgU2hpcCBmcm9tIFwiLi4vZmFjdG9yaWVzL1NoaXBcIjtcbmV4cG9ydCBjb25zdCBjcmVhdGVCb2FyZCA9IChuZXdCb2FyZCxpZCxjbGFzc05hbWUsZGlyZWN0aW9uKT0+e1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoaWQpO1xuICAgIG5ld0JvYXJkLmluaXRpYWxpemUoKTtcbiAgICBsZXQgYm9hcmQgPSBuZXdCb2FyZC5ib2FyZDtcbiAgICBib2FyZC5mb3JFYWNoKGU9PntcbiAgICAgICAgZS5mb3JFYWNoKGU9PntcbiAgICAgICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgZGl2LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTsgXG4gICAgICAgICAgICBkaXYuY2xhc3NMaXN0LmFkZChkaXJlY3Rpb24pOyBcbiAgICAgICAgICAgIGRpdi5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJyxlKTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChkaXYpO1xuICAgICAgICAgICAgZGl2LnZhbHVlID0gZTtcbiAgICAgICAgICAgIGRpdi50ZXh0Q29udGVudCA9IGU7XG4gICAgICAgICAgICBcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnQgY29uc3QgdXBkYXRlQm9hcmQgPSAobmV3Qm9hcmQsY29udGFpbmVySUQsZ3JpZElEKT0+e1xuICAgIHJlbW92ZUJvYXJkKGNvbnRhaW5lcklELGdyaWRJRCk7XG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7Y29udGFpbmVySUR9YCk7XG4gICAgbGV0IGJvYXJkID0gbmV3Qm9hcmQuYm9hcmQ7XG4gICAgYm9hcmQuZm9yRWFjaChlPT57XG4gICAgICAgIGUuZm9yRWFjaChlPT57XG4gICAgICAgICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKGdyaWRJRCk7IFxuICAgICAgICAgIC8vICBkaXYuY2xhc3NMaXN0LmFkZChkaXJlY3Rpb24pOyBcbiAgICAgICAgICAgIGRpdi5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJyxlKTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChkaXYpO1xuICAgICAgICAgICAgZGl2LnZhbHVlID0gZTtcbiAgICAgICAgICAgIGRpdi50ZXh0Q29udGVudCA9IGU7XG4gICAgICAgICAgICBcbiAgICAgICAgfSk7XG4gICAgICAgICBcbiAgICB9KTtcblxuICAgIFxufVxuZXhwb3J0IGNvbnN0IHJlbW92ZUJvYXJkID0gKGNvbnRhaW5lcklELGdyaWRJRCk9PntcbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtjb250YWluZXJJRH1gKTtcbiAgICBjb25zdCBncmlkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgLiR7Z3JpZElEfWApO1xuICAgIGdyaWQuZm9yRWFjaChlbGVtZW50PT4geyBcbiAgICAgICAgICAgIFxuICAgICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKGVsZW1lbnQpXG4gICAgICBcbiAgICAgICBcbiAgICB9KTtcbn1cbmV4cG9ydCBjb25zdCBjbGlja0V2ZW50ID0gKHBsYXllcixhaSk9PntcbiAgICBjb25zdCBncmlkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5ncmlkcycpO1xuICAgIGdyaWRzLmZvckVhY2goZWxlbWVudD0+ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsKGUpPT57XG4gICAgICAgIGlmKHBsYXllci50dXJuKXtcbiAgICAgICAgICAgICBhaS50dXJuID0gdHJ1ZTtcbiAgICAgICAgICAgICBwbGF5ZXIudHVybiA9IGZhbHNlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zb2xlLmxvZygncGxheWVyOiAnK2UudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgICAgICBjb25zdCBldmVudCA9IG5ldyBFdmVudCgnY2xpY2snKTtcbiAgICAgICAgICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgIH1lbHNlIGlmKGFpLnR1cm4pe1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2FpOiAnKyBhaS5hdXRvUGxheSgpKTtcbiAgICAgICAgICAgIGFpLnR1cm4gPSBmYWxzZTtcbiAgICAgICAgICAgIHBsYXllci50dXJuID0gdHJ1ZTtcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH0pKTtcbn1cbmNvbnN0IGZpbmRFbGVtZW50ID0gKHNoaXAsZXZlbnQsY29sb3IpPT57XG4gICAgbGV0IGNvb3JkaW5hdGUgPSBbXTtcbiAgICBpZihzaGlwLmxlbmd0aD09PTEpe1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvcihsZXQgaT0wO2k8PXNoaXAubGVuZ3RoLTE7aSsrKXtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgZGl2W3ZhbHVlPVwiJHtldmVudC50YXJnZXQudmFsdWUraX1cIl1gKS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcjtcbiAgICAgICAgY29vcmRpbmF0ZS5wdXNoKGV2ZW50LnRhcmdldC52YWx1ZStpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvb3JkaW5hdGU7XG59XG5cbmxldCBmbGFnID0gdHJ1ZTtcbmV4cG9ydCBjb25zdCByZW5kZXJQbGF5ZXJTaGlwcyA9ICAoZ2FtZWJvYXJkLGxlbmd0aCkgPT57XG4gICAgY29uc3QgZ3JpZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjcHJpbWFyeS1jb250YWluZXI+LnBsYXllci1ncmlkcycpO1xuICAgIGNvbnN0IHZlcnRpY2FsR3JpZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjcHJpbWFyeS1jb250YWluZXI+LnBsYXllci1ncmlkcycpO1xuICAgIGNvbnN0IHJvdGF0ZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyb3RhdGUnKTtcbiAgICBjb25zdCBzaGlwID0gbmV3IFNoaXAobGVuZ3RoLDAsWzEsMiwzXSk7XG4gICAgaWYobGVuZ3RoPT09Myl7XG4gICAgICAgIGlmKGZsYWcpe1xuICAgICAgICAgICBsZW5ndGgrPTE7IFxuICAgICAgICAgICBmbGFnPWZhbHNlO1xuICAgICAgICB9IFxuICAgIH1cbiAgICBpZihsZW5ndGg8PTApe1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIGdyaWRzLmZvckVhY2goZWxlbWVudD0+ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLChlKT0+e1xuICAgICAgICAgXG4gICAgICAgICAgICAgZmluZEVsZW1lbnQoc2hpcCxlLCdibHVlJyk7IFxuICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywoZSk9PntcbiAgICAgICAgICAgICAgIHNoaXAucG9zaXRpb24gPSBmaW5kRWxlbWVudChzaGlwLGUsJ3llbGxvdycpO1xuICAgICAgICAgICAgICAgc2hpcC5jb2x1bW4gPSBNYXRoLmZsb29yKHNoaXAucG9zaXRpb25bMF0vMTApO1xuICAgICAgICAgICAgICAgICBnYW1lYm9hcmQucGxhY2VTaGlwKHNoaXApO1xuICAgICAgICAgICAgICAgICB1cGRhdGVCb2FyZChnYW1lYm9hcmQsJ3ByaW1hcnktY29udGFpbmVyJyxcInBsYXllci1ncmlkc1wiKTtcbiAgICAgICAgICAgICAgICAgcmVuZGVyUGxheWVyU2hpcHMoZ2FtZWJvYXJkLGxlbmd0aC0xKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICBcbiAgICAgICAgICAgXG4gICAgICAgICAgXG4gICAgfSkpO1xuICAgIFxuXG4gICAgZ3JpZHMuZm9yRWFjaChlbGVtZW50PT5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywoZSk9PntcbiAgICAgICAgZmluZEVsZW1lbnQoc2hpcCxlLCdibGFjaycpO1xuICAgIH0pKTsgIFxuICAgIFxuICAgIHJvdGF0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsKGUpPT57XG4gICAgICAgIGdyaWRzLmZvckVhY2goZWxlbWVudD0+e1xuICAgICAgICAgICBcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZSgnaG9yaXpvbnRhbCcpO1xuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCd2ZXJ0aWNhbCcpO1xuICAgICAgICB9KVxuICAgIH0pO1xuICAgIFxufVxuXG5cblxuXG5cblxuZXhwb3J0IGNvbnN0IHJlbmRlckFpU2hpcHMgPSAgKGdhbWVib2FyZCkgPT57XG4gICAgY29uc3Qgc2hpcCA9IG5ldyBTaGlwKDUsMCxbMSwyLDMsNCw1XSk7XG4gICAgY29uc3Qgc2hpcDIgPSBuZXcgU2hpcCg0LDcsWzczLDc0LDc1LDc2XSk7XG4gICAgY29uc3Qgc2hpcDMgPSBuZXcgU2hpcCgzLDIsWzIyLDIzLDI0XSk7XG4gICAgY29uc3Qgc2hpcDQgPSBuZXcgU2hpcCgzLDQsWzQ0LDQ1LDQ2XSk7XG4gICAgY29uc3Qgc2hpcDUgPSBuZXcgU2hpcCgyLDksWzkxLDkyXSk7XG4gICAgZ2FtZWJvYXJkLnBsYWNlU2hpcChzaGlwKTtcbiAgICBnYW1lYm9hcmQucGxhY2VTaGlwKHNoaXAyKTtcbiAgICBnYW1lYm9hcmQucGxhY2VTaGlwKHNoaXAzKTtcbiAgICBnYW1lYm9hcmQucGxhY2VTaGlwKHNoaXA0KTtcbiAgICBnYW1lYm9hcmQucGxhY2VTaGlwKHNoaXA1KTtcbiAgICB1cGRhdGVCb2FyZChnYW1lYm9hcmQsJ3NlY29uZGFyeS1jb250YWluZXInLFwiYWktZ3JpZHNcIik7XG59XG5cblxuIiwiaW1wb3J0IEdhbWVCb2FyZCBmcm9tIFwiLi4vZmFjdG9yaWVzL0dhbWVCb2FyZFwiO1xuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSBcIi4uL2ZhY3Rvcmllcy9QbGF5ZXJcIlxuaW1wb3J0IFNoaXAgZnJvbSBcIi4uL2ZhY3Rvcmllcy9TaGlwXCI7XG5pbXBvcnQgeyBjbGlja0V2ZW50LCBjcmVhdGVCb2FyZCwgcmVtb3ZlQm9hcmQsIHJlbmRlckFpU2hpcHMsIHJlbmRlclBsYXllclNoaXBzLCB1cGRhdGVCb2FyZCB9IGZyb20gXCIuL2RvbVwiO1xuXG5leHBvcnQgY29uc3QgcnVuR2FtZSA9ICgpPT57XG4gICAgY29uc3QgcGxheWVyID0gbmV3IFBsYXllcigpO1xuICAgIGNvbnN0IGFpID0gbmV3IFBsYXllcigpO1xuICAgIGNvbnN0IHBsYXllckJvYXJkID0gbmV3IEdhbWVCb2FyZCgpO1xuICAgIGNvbnN0IGFpQm9hcmQgPSBuZXcgR2FtZUJvYXJkKCk7XG4gICAgXG4gICAgY3JlYXRlQm9hcmQocGxheWVyQm9hcmQsJyNwcmltYXJ5LWNvbnRhaW5lcicsJ3BsYXllci1ncmlkcycsJ2hvcml6b250YWwnKTtcbiAgICBjcmVhdGVCb2FyZChhaUJvYXJkLCcjc2Vjb25kYXJ5LWNvbnRhaW5lcicsJ2FpLWdyaWRzJywnaG9yaXpvbnRhbCcpO1xuICAgICByZW5kZXJQbGF5ZXJTaGlwcyhwbGF5ZXJCb2FyZCw1KTsgXG4gICAgcmVuZGVyQWlTaGlwcyhhaUJvYXJkKVxuICAgIC8vIHJlbmRlclNoaXBzKGdhbWVib2FyZCw0KTtcbiAgIC8vIHVwZGF0ZUJvYXJkKGdhbWVib2FyZCwncHJpbWFyeS1jb250YWluZXInLFwicGxheWVyLWdyaWRzXCIpO1xuICAgICBcbiAgICAvLyBmb3IobGV0IGkgPTA7aTw0OyBpKyspe1xuICAgICAgIFxuICAgIC8vICAgICByZW5kZXJTaGlwcyhnYW1lYm9hcmQsNCk7XG4gICAgLy8gfVxuICAgICBcbiAgICBcblxuICAgXG4gICAgLy8gIGNvbnNvbGUubG9nKGdhbWVib2FyZC5ib2FyZCk7XG4gICAgLy8gIGNsaWNrRXZlbnQocGxheWVyLGFpKTtcbn1cbnJ1bkdhbWUoKTsiXSwibmFtZXMiOlsiR2FtZUJvYXJkIiwiY29uc3RydWN0b3IiLCJib2FyZCIsInRoaXMiLCJtaXNzZWQiLCJoaXRzIiwiaW5pdGlhbGl6ZSIsImNvdW50IiwiaSIsImoiLCJwbGFjZVNoaXAiLCJzaGlwIiwiY29sdW1uIiwicG9zaXRpb24iLCJsZW5ndGgiLCJpbmRleE9mIiwicmVjaWV2ZUF0dGFjayIsInVuZGVmaW5lZCIsInB1c2giLCJQbGF5ZXIiLCJ0dXJuIiwiYXV0b1BsYXkiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJTaGlwIiwiaGl0IiwiaGl0UG9zaXRpb24iLCJpbmNsdWRlcyIsImlzU3VuayIsImNyZWF0ZUJvYXJkIiwibmV3Qm9hcmQiLCJpZCIsImNsYXNzTmFtZSIsImRpcmVjdGlvbiIsImNvbnRhaW5lciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImZvckVhY2giLCJlIiwiZGl2IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwidmFsdWUiLCJ0ZXh0Q29udGVudCIsInVwZGF0ZUJvYXJkIiwiY29udGFpbmVySUQiLCJncmlkSUQiLCJyZW1vdmVCb2FyZCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJlbGVtZW50IiwicmVtb3ZlQ2hpbGQiLCJmaW5kRWxlbWVudCIsImV2ZW50IiwiY29sb3IiLCJjb29yZGluYXRlIiwidGFyZ2V0Iiwic3R5bGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJmbGFnIiwicmVuZGVyUGxheWVyU2hpcHMiLCJnYW1lYm9hcmQiLCJncmlkcyIsInJvdGF0ZUJ1dHRvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0b2dnbGUiLCJwbGF5ZXJCb2FyZCIsImFpQm9hcmQiLCJzaGlwMiIsInNoaXAzIiwic2hpcDQiLCJzaGlwNSIsInJlbmRlckFpU2hpcHMiLCJydW5HYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==