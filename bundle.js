(()=>{"use strict";class t{constructor(t){this.board=t||[],this.missed=[[]],this.hits=[[]]}initialize(){let t=0;for(let e=0;e<10;e++){this.board[e]=[];for(let o=0;o<10;o++)this.board[e][o]=t,t++}}placeShip(t){let e=t.column,o=t.position;for(let t=0;t<o.length;t++)for(let i=0;i<o.length;i++)this.board[e[t]][this.board[e[t]].indexOf(o[i])]="x"}recieveAttack(t,e){"x"===this.board[t][e]?void 0===this.hits[t]?this.hits[t]=[e]:this.hits[t].push(e):void 0===this.missed[t]?this.missed[t]=[e]:this.missed[t].push(e)}}class e{constructor(){this.turn=!0,this.position=this.position}autoPlay(){return Math.floor(10*Math.random())}}class o{constructor(t,e,o){this.length=t,this.hits=[],this.position=o||[],this.column=e||[]}hit(t){this.position.includes(t)&&!this.hits.includes(t)&&this.hits.push(t)}isSunk(){return this.length===this.hits.length}}const i=(t,e,o,i)=>{const s=document.querySelector(e);t.initialize(),t.board.forEach((t=>{t.forEach((t=>{const e=document.createElement("div");e.classList.add(o),e.classList.add(i),e.setAttribute("value",t),s.appendChild(e),e.value=t,e.textContent=t}))}))},s=(t,e,o,i)=>{n(e,o);const s=document.querySelector(`#${e}`);t.board.forEach((t=>{t.forEach((t=>{const e=document.createElement("div");e.classList.add(o),e.classList.add(i),e.setAttribute("value",t),s.appendChild(e),e.value=t,e.textContent=t}))}))},n=(t,e)=>{const o=document.querySelector(`#${t}`);document.querySelectorAll(`.${e}`).forEach((t=>{o.removeChild(t)}))},l=(t,e,o,i)=>{i>1&&(t.length=10*t.length);let s=[];if(1!==t.length){for(let n=0;n<=t.length-1;n+=i)document.querySelector(`div[value="${e.target.value+n}"]`).style.backgroundColor=o,console.log(e.target.value+n),s.push(e.target.value+n);return s}};let r=!0,a="horizontal",c=1;const h=(t,e)=>{console.log(a);let i=document.querySelectorAll(`#primary-container>.${a}`);console.log(i[1]);const n=document.querySelector("#rotate"),d=new o(e,[0,0,0],[1,2,3]);3===e&&r&&(e+=1,r=!1),e<=0||(i.forEach((o=>o.addEventListener("mouseover",(i=>{console.log(l(d,i,"blue",c)),o.addEventListener("click",(o=>{d.position=l(d,o,"yellow",c),d.column=Math.floor(d.position[0]/10),t.placeShip(d),s(t,"primary-container","player-grids",a),h(t,e-1)}))})))),i.forEach((t=>t.addEventListener("mouseout",(t=>{l(d,t,"black",c)})))),n.addEventListener("click",(t=>{c=10,a="horizontal"===a?"vertical":"horizontal",i.forEach((t=>{t.classList.toggle("horizontal"),t.classList.toggle("vertical")}))})))};(()=>{new e,new e;const n=new t,l=new t;i(n,"#primary-container","player-grids","horizontal"),i(l,"#secondary-container","ai-grids","horizontal"),h(n,5),(t=>{const e=new o(5,0,[1,2,3,4,5]),i=new o(4,7,[73,74,75,76]),n=new o(3,2,[22,23,24]),l=new o(3,4,[44,45,46]),r=new o(2,9,[91,92]);t.placeShip(e),t.placeShip(i),t.placeShip(n),t.placeShip(l),t.placeShip(r),s(t,"secondary-container","ai-grids")})(l)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,