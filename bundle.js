(()=>{"use strict";class e{constructor(){this.turn=!0,this.position=this.position}autoPlay(e){return e[Math.floor(10*Math.random())]}}class t{constructor(e,t,r){this.length=e,this.hits=[],this.position=r||[],this.column=t||[]}hit(e){this.hits.push(e)}isSunk(){return this.length===this.hits.length}}const r=(e,t,r,l)=>{const a=document.querySelector(t);let n=e.board;console.log(n),n.forEach((e=>{e.forEach((e=>{const t=document.createElement("div");t.classList.add(r),t.classList.add(l),t.setAttribute("value",e),a.appendChild(t),t.value=e,t.textContent=e}))}))},l=(e,t,r,l)=>{a(t,r);const n=document.querySelector(`#${t}`);e.board.forEach((e=>{e.forEach((e=>{const t=document.createElement("div");t.classList.add(r),t.classList.add(l),t.setAttribute("value",e),n.appendChild(t),t.value=e,t.textContent=e}))}))},a=(e,t)=>{const r=document.querySelector(`#${e}`);document.querySelectorAll(`.${t}`).forEach((e=>{r.removeChild(e)}))},n=(e,t,r)=>{let l=[6,7,8,9],a=[7,8,9],n=[8,9],o=[9];if(1===r)switch(!0){case 5===e.length&&l.includes(t.target.value%10):case 4===e.length&&a.includes(t.target.value%10):case 3===e.length&&n.includes(t.target.value%10):case 2===e.length&&o.includes(t.target.value%10):return!0}if(10===r)switch(!0){case 5===e.length&&l.includes(Math.floor(t.target.value/10)):case 4===e.length&&a.includes(Math.floor(t.target.value/10)):case 3===e.length&&n.includes(Math.floor(t.target.value/10)):case 2===e.length&&o.includes(Math.floor(t.target.value/10)):return!0}},o=(e,t,r,l)=>{let a=[];if(1!==e.length){for(let o=0;o<=(e.length-1)*l;o+=l){if(n(e,t,l))return;if(5===e.length&&t.target.value%10==6)return;if(t.target.value+o=="x0")return;if(null===document.querySelector(`div[value="${t.target.value+o}"]`))return;if(t.target.value+o=="x0")return;document.querySelector(`div[value="${t.target.value+o}"]`).style.backgroundColor=r,a.push(t.target.value+o)}return a}};let i=!0,c="horizontal",s=1;const u=document.querySelector("#rotate"),d=(e,r)=>{let a=document.querySelectorAll(`.player-grids.${c}`);const n=new t(r,[0,0,0],[1,2,3]);3===r&&i&&(r+=1,i=!1),r<=0||(a.forEach((t=>t.addEventListener("mouseover",(a=>{o(n,a,"blue",s),t.addEventListener("click",(t=>{n.position=o(n,t,"gray",s),n.column=(e=>{let t=[];for(let r=0;r<=e.length-1;r++)e.position[r]&&t.push(Math.floor(e.position[r]/10));return t})(n),e.placeShip(n),l(e,"primary-container","player-grids",c),Array.from(document.querySelectorAll(".player-grids")).filter((e=>"x"===e.value)).forEach((e=>e.style.backgroundColor="transparent")),d(e,r-1)}))})))),a.forEach((e=>e.addEventListener("mouseout",(e=>{o(n,e,"gray",s)})))))};let h=!0;u.addEventListener("click",(e=>{"horizontal"===c?(c="vertical",s=10):"vertical"===c&&(c="horizontal",s=1)}));class g{constructor(e){this.board=e||[],this.missed=[[]],this.hits=[]}initialize(e){for(let t=0;t<10;t++){this.board[t]=[];for(let r=0;r<10;r++)this.board[t][r]=e,e++}}placeShip(e){let t=e.column,r=e.position;for(let e=0;e<r.length;e++)for(let l=0;l<r.length;l++)this.board[t[e]][this.board[t[e]].indexOf(r[l])]="x"}recieveAttack(e){this.hits.push(e)}}(()=>{new e,new e;const a=new g,n=new g;a.initialize(0),n.initialize(100),r(a,"#primary-container","player-grids","horizontal"),r(n,"#secondary-container","ai-grids","x"),d(a,5),(e=>{const r=new t(5,[0,0,0,0,0],[101,102,103,104,105]),a=new t(4,[7,7,7,7],[173,174,175,176]),n=new t(3,[2,2,2],[122,123,124]),o=new t(3,[4,4,4],[144,145,146]),i=new t(2,[8,9],[181,191]);e.placeShip(r),e.placeShip(a),e.placeShip(n),e.placeShip(o),e.placeShip(i),l(e,"secondary-container","ai-grids")})(n),((t,r)=>{let l;const a=new e,n=document.querySelectorAll(".player-grids");let o,i=a.autoPlay(n);const c=document.querySelectorAll(".ai-grids"),s=new Event("click");c.forEach((r=>r.addEventListener("click",(a=>{l=new e,i=l.autoPlay(n),o=i.value,"x"===a.target.value?(t.recieveAttack(a.target.value),r.style.backgroundColor="red",i.dispatchEvent(s)):(r.style.backgroundColor="green",i.dispatchEvent(s))})))),i.addEventListener("click",(e=>{console.log("inside ai"),"x"===o?(r.recieveAttack(o),i.style.backgroundColor="red",h=!1,a.turn=!0):i.style.backgroundColor="green"}))})(n,a)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,