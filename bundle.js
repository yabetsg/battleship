(()=>{"use strict";class e{constructor(e){this.board=e||[],this.missed=[[]],this.hits=[],this.allow=!1}initialize(e){for(let t=0;t<10;t++){this.board[t]=[];for(let r=0;r<10;r++)this.board[t][r]=e,e++}}placeShip(e){let t=e.column,r=e.position;for(let e=0;e<r.length;e++)for(let o=0;o<r.length;o++)this.board[t[e]][this.board[t[e]].indexOf(r[o])]="x"}recieveAttack(e){this.hits.push(e)}allowAttack(){return this.allow}}class t{constructor(){this.turn=!0,this.position=this.position}autoPlay(e){return e[Math.floor(100*Math.random())]}}class r{constructor(e,t,r){this.length=e,this.hits=[],this.position=r||[],this.column=t||[]}hit(e){this.hits.push(e)}allShipSunk(){return 16===this.hits.length}}const o=(e,t,r,o)=>{const a=document.querySelector(t);e.board.forEach((e=>{e.forEach((e=>{const t=document.createElement("div");t.classList.add(r),t.classList.add(o),t.setAttribute("value",e),a.appendChild(t),t.value=e,t.textContent=e}))}))},a=(e,t,r,o)=>{l(t,r);const a=document.querySelector(`#${t}`);e.board.forEach((e=>{e.forEach((e=>{const t=document.createElement("div");t.classList.add(r),t.classList.add(o),t.setAttribute("value",e),a.appendChild(t),t.value=e,t.textContent=e}))}))},l=(e,t)=>{const r=document.querySelector(`#${e}`);document.querySelectorAll(`.${t}`).forEach((e=>{r.removeChild(e)}))},n=(e,t,r)=>{let o=[6,7,8,9],a=[7,8,9],l=[8,9],n=[9];if(1===r)switch(!0){case 5===e.length&&o.includes(t.target.value%10):case 4===e.length&&a.includes(t.target.value%10):case 3===e.length&&l.includes(t.target.value%10):case 2===e.length&&n.includes(t.target.value%10):return!0}if(10===r)switch(!0){case 5===e.length&&o.includes(Math.floor(t.target.value/10)):case 4===e.length&&a.includes(Math.floor(t.target.value/10)):case 3===e.length&&l.includes(Math.floor(t.target.value/10)):case 2===e.length&&n.includes(Math.floor(t.target.value/10)):return!0}},i=(e,t,r,o)=>{let a=[];if(1!==e.length){for(let l=0;l<=(e.length-1)*o;l+=o){if(n(e,t,o))return;if(5===e.length&&t.target.value%10==6)return;if(t.target.value+l=="x0")return;if(null===document.querySelector(`div[value="${t.target.value+l}"]`))return;if(t.target.value+l=="x0")return;document.querySelector(`div[value="${t.target.value+l}"]`).style.backgroundColor=r,a.push(t.target.value+l)}return a}};let c=!0,s="horizontal",u=1;const h=document.querySelector("#rotate"),d=(e,t,o)=>{let l=document.querySelectorAll(`.player-grids.${s}`);const n=new r(t,[0,0,0],[1,2,3]);3===t&&c&&(t+=1,c=!1),t<=1?g(e):(l.forEach((r=>r.addEventListener("mouseover",(l=>{i(n,l,"blue",u),r.addEventListener("click",(r=>{console.log(o),n.position=i(n,r,"gray",u),n.column=(e=>{let t=[];for(let r=0;r<=e.length-1;r++)e.position[r]&&t.push(Math.floor(e.position[r]/10));return t})(n),e.placeShip(n),a(e,"primary-container","player-grids",s),Array.from(document.querySelectorAll(".player-grids")).filter((e=>"x"===e.value)).forEach((e=>e.style.backgroundColor="transparent")),d(e,t-1)}))})))),l.forEach((e=>e.addEventListener("mouseout",(e=>{i(n,e,"gray",u)})))))},g=r=>{let o,a,l,n=new e;const i=document.querySelectorAll(".player-grids");document.querySelectorAll(".ai-grids").forEach((e=>e.addEventListener("click",(c=>{const s=c.target.value;o=new t,a=o.autoPlay(i),l=a.value,"x"===s?(n.recieveAttack(s),p(n),e.style.backgroundColor="red",v(a,l,r),console.log("hits:"+n.hits.length)):(e.style.backgroundColor="green",v(a,l,r))}))))},v=(e,t,r)=>{e.addEventListener("click",(o=>{const a=o.target.value;"x"===t?(r.recieveAttack(t),p(r),e.style.backgroundColor="red",r.recieveAttack(a)):e.style.backgroundColor="green"}));const o=new Event("click");e.dispatchEvent(o)};h.addEventListener("click",(e=>{"horizontal"===s?(s="vertical",u=10):"vertical"===s&&(s="horizontal",u=1)}));const p=e=>{17===e.hits.length&&console.log("player won!")};(()=>{new t,new t;const l=new e,n=new e;l.initialize(0),n.initialize(100),o(l,"#primary-container","player-grids","horizontal"),o(n,"#secondary-container","ai-grids","horizontal"),(e=>{const t=new r(5,[0,0,0,0,0],[101,102,103,104,105]),o=new r(4,[7,7,7,7],[173,174,175,176]),l=new r(3,[2,2,2],[122,123,124]),n=new r(3,[4,4,4],[144,145,146]),i=new r(2,[8,9],[181,191]);e.placeShip(t),a(e,"secondary-container","ai-grids","horizontal"),e.placeShip(o),a(e,"secondary-container","ai-grids","horizontal"),e.placeShip(l),a(e,"secondary-container","ai-grids","horizontal"),e.placeShip(n),a(e,"secondary-container","ai-grids","horizontal"),e.placeShip(i),a(e,"secondary-container","ai-grids","horizontal")})(n),d(l,5,n)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,