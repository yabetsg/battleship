(()=>{"use strict";class e{constructor(e,t,l){this.length=e,this.hits=[],this.position=l||[],this.column=t||[]}hit(e){this.position.includes(e)&&!this.hits.includes(e)&&this.hits.push(e)}isSunk(){return this.length===this.hits.length}}const t=(e,t,l,r)=>{const a=document.querySelector(t);let i=e.board;console.log(i),i.forEach((e=>{e.forEach((e=>{const t=document.createElement("div");t.classList.add(l),t.classList.add(r),t.setAttribute("value",e),a.appendChild(t),t.value=e,t.textContent=e}))}))},l=(e,t,l,a)=>{r(t,l);const i=document.querySelector(`#${t}`);e.board.forEach((e=>{e.forEach((e=>{const t=document.createElement("div");t.classList.add(l),t.classList.add(a),t.setAttribute("value",e),i.appendChild(t),t.value=e,t.textContent=e}))}))},r=(e,t)=>{const l=document.querySelector(`#${e}`);document.querySelectorAll(`.${t}`).forEach((e=>{l.removeChild(e)}))},a=(e,t,l)=>{let r=[6,7,8,9],a=[7,8,9],i=[8,9],n=[9];if(1===l)switch(!0){case 5===e.length&&r.includes(t.target.value%10):case 4===e.length&&a.includes(t.target.value%10):case 3===e.length&&i.includes(t.target.value%10):case 2===e.length&&n.includes(t.target.value%10):return!0}if(10===l)switch(!0){case 5===e.length&&r.includes(Math.floor(t.target.value/10)):case 4===e.length&&a.includes(Math.floor(t.target.value/10)):case 3===e.length&&i.includes(Math.floor(t.target.value/10)):case 2===e.length&&n.includes(Math.floor(t.target.value/10)):return!0}},i=(e,t,l,r)=>{let i=[];if(1!==e.length){for(let n=0;n<=(e.length-1)*r;n+=r){if(a(e,t,r))return;if(5===e.length&&t.target.value%10==6)return;if(t.target.value+n=="x0")return;if(null===document.querySelector(`div[value="${t.target.value+n}"]`))return;if(t.target.value+n=="x0")return;document.querySelector(`div[value="${t.target.value+n}"]`).style.backgroundColor=l,i.push(t.target.value+n)}return i}};let n=!0,o="horizontal",s=1;const u=document.querySelector("#rotate"),c=(t,r)=>{let a=document.querySelectorAll(`.player-grids.${o}`);const u=new e(r,[0,0,0],[1,2,3]);3===r&&n&&(r+=1,n=!1),r<=0||(a.forEach((e=>e.addEventListener("mouseover",(a=>{i(u,a,"blue",s),e.addEventListener("click",(e=>{u.position=i(u,e,"gray",s),u.column=(e=>{let t=[];for(let l=0;l<=e.length-1;l++)e.position[l]&&t.push(Math.floor(e.position[l]/10));return t})(u),t.placeShip(u),l(t,"primary-container","player-grids",o),Array.from(document.querySelectorAll(".player-grids")).filter((e=>"x"===e.value)).forEach((e=>e.style.backgroundColor="transparent")),c(t,r-1)}))})))),a.forEach((e=>e.addEventListener("mouseout",(e=>{i(u,e,"gray",s)})))))};u.addEventListener("click",(e=>{"horizontal"===o?(o="vertical",s=10):"vertical"===o&&(o="horizontal",s=1)}));class h{constructor(e){this.board=e||[],this.missed=[[]],this.hits=[[]]}initialize(e){for(let t=0;t<10;t++){this.board[t]=[];for(let l=0;l<10;l++)this.board[t][l]=e,e++}}placeShip(e){let t=e.column,l=e.position;for(let e=0;e<l.length;e++)for(let r=0;r<l.length;r++)this.board[t[e]][this.board[t[e]].indexOf(l[r])]="x"}checkIfOutOfBound=(e,t)=>{let l=this.ship;if(1===t)switch(!0){case 5===l.length&&outOfBound5.includes(e.target.value%10):case 4===l.length&&outOfBound4.includes(e.target.value%10):case 3===l.length&&outOfBound3.includes(e.target.value%10):case 2===l.length&&outOfBound2.includes(e.target.value%10):return!0}if(10===t)switch(!0){case 5===l.length&&outOfBound5.includes(Math.floor(e.target.value/10)):case 4===l.length&&outOfBound4.includes(Math.floor(e.target.value/10)):case 3===l.length&&outOfBound3.includes(Math.floor(e.target.value/10)):case 2===l.length&&outOfBound2.includes(Math.floor(e.target.value/10)):return}};recieveAttack(e,t){"x"===this.board[e][t]?void 0===this.hits[e]?this.hits[e]=[t]:this.hits[e].push(t):void 0===this.missed[e]?this.missed[e]=[t]:this.missed[e].push(t)}}class d{constructor(){this.turn=!0,this.position=this.position}autoPlay(){return Math.floor(10*Math.random())}}(()=>{new d,new d;const r=new h,a=new h;r.initialize(0),a.initialize(100),t(r,"#primary-container","player-grids","horizontal"),t(a,"#secondary-container","ai-grids","x"),c(r,5),(t=>{const r=new e(5,[0,0,0,0,0],[100,102,103,104,105]),a=new e(4,[7,7,7,7],[173,174,175,176]),i=new e(3,[2,2,2],[122,123,124]),n=new e(3,[4,4,4],[144,145,146]),o=new e(2,[8,9],[181,191]);t.placeShip(r),t.placeShip(a),t.placeShip(i),t.placeShip(n),t.placeShip(o),l(t,"secondary-container","ai-grids")})(a)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,